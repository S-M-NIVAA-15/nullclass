requirements.txt
torch
transformers
tk

translator.py

from transformers import MarianMTModel, MarianTokenizer

src_lang = "en"  # English
tgt_lang = "fr"  # French

model_name = f"Helsinki-NLP/opus-mt-{src_lang}-{tgt_lang}"
tokenizer = MarianTokenizer.from_pretrained(model_name)
model = MarianMTModel.from_pretrained(model_name)

def translate_text(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True)
    translated = model.generate(**inputs)
    return tokenizer.decode(translated[0], skip_special_tokens=True)

if __name__ == "__main__":
    input_text = "Hello, how are you?"
    print("Original:", input_text)
    print("Translated:", translate_text(input_text))

gui.py

import tkinter as tk
from translator import translate_text  

def translate():
    input_text = text_input.get("1.0", "end-1c")
    if input_text.strip():
        translated_text = translate_text(input_text)
        text_output.delete("1.0", tk.END)
        text_output.insert(tk.END, translated_text)

root = tk.Tk()
root.title("Text Translator")

tk.Label(root, text="Enter Text:", font=("Arial", 12)).pack()
text_input = tk.Text(root, height=5, width=50)
text_input.pack()

tk.Button(root, text="Translate", command=translate, font=("Arial", 12)).pack()

tk.Label(root, text="Translated Text:", font=("Arial", 12)).pack()
text_output = tk.Text(root, height=5, width=50)
text_output.pack()

root.mainloop()
